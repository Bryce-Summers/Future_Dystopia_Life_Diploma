// Generated by CoffeeScript 1.11.1

/*
 * Drawing Controller for Future Dystopia Project.
 *
 * Adapted by Bryce Summers on 4.15.2017
 * 
 * This class renders the current state of the game as represented in the passed in state controller.
 */

(function() {
  FDP.Controller_Draw = (function() {
    function Controller_Draw(_G_Canvas, state) {
      this._G_Canvas = _G_Canvas;
      this.state = state;
      this._active = true;
      this._grid_size = 16;
      this.background = null;
      this.background_color = null;
      this.background_alpha = 1.0;
      this.background_target_alpha = 1.0;
      this.center_text_message = null;
      this.center_text_color = null;
      this.transition_speed = .01;
    }

    Controller_Draw.prototype.setActive = function(isActive) {
      return this._active = isActive;
    };

    Controller_Draw.prototype.isActive = function() {
      return this._active;
    };

    Controller_Draw.prototype.mouse_down = function(event) {};

    Controller_Draw.prototype.mouse_up = function(event) {};

    Controller_Draw.prototype.mouse_move = function(event) {};

    Controller_Draw.prototype.time = function(dt) {
      this._G_Canvas.clearScreen();
      if (this.background !== null) {
        this._G_Canvas.drawImage(this.background, 0, 0);
      }
      if (this.background_alpha !== null) {
        this._G_Canvas.setAlpha(this.background_alpha);
      }
      if (this.background_color !== null) {
        this._G_Canvas.fillColor(this.background_color.toInt());
        this._G_Canvas.fillScreen();
        if (this.center_text_message) {
          this._G_Canvas.fillColor(this.center_text_color.toInt());
          this._G_Canvas.centerAlignFont();
          this._G_Canvas.setFont("Verdana", 40);
          this._G_Canvas.drawText(this.center_text_message, this._G_Canvas.w / 2, this._G_Canvas.h / 2);
        }
      }
      this.background_alpha = (1.0 - this.transition_speed) * this.background_alpha + this.transition_speed * this.background_target_alpha;
      return this._G_Canvas.setAlpha(1.0);

      /*
      for r in [0 ... @state.h]
          for c in [0 ... @state.w]
              color = @state.readGrid(r, c, null)
              @drawGridSquare(r, c, color)
       */
    };

    Controller_Draw.prototype.drawGridSquare = function(r, c, color) {
      var polyline, pts, x0, x1, y0, y1;
      x0 = c * 16;
      x1 = x0 + 16;
      y0 = r * 16;
      y1 = y0 + 16;
      pts = [new BDS.Point(x0, y0), new BDS.Point(x1, y0), new BDS.Point(x1, y1), new BDS.Point(x0, y1)];
      polyline = new BDS.Polyline(true, pts);
      this._G_Canvas.fillColor(color.toInt());
      this._G_Canvas.setAlpha(.5);
      this._G_Canvas.drawPolygon(polyline, false, true);
      return this._G_Canvas.setAlpha(1.0);
    };

    Controller_Draw.prototype.window_resize = function(event) {};

    Controller_Draw.prototype.backgroundImage = function(img) {
      return this.background = img;
    };

    Controller_Draw.prototype.backgroundMono = function(color, target_alpha, transition_speed) {
      this.background_color = color;
      this.background_target_alpha = target_alpha;
      this.transition_speed = transition_speed;
      if (!transition_speed) {
        this.transition_speed = .01;
      }
    };

    Controller_Draw.prototype.centerMessage = function(text, color) {
      this.center_text_message = text;
      this.center_text_color = color;
    };

    return Controller_Draw;

  })();

}).call(this);
