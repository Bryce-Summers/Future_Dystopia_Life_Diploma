// Generated by CoffeeScript 1.11.1

/*
 * Drawing Controller for Future Dystopia Project.
 *
 * Adapted by Bryce Summers on 4.15.2017
 * 
 * This class renders the current state of the game as represented in the passed in state controller.
 */

(function() {
  FDP.Controller_Draw = (function() {
    function Controller_Draw(_G_Canvas, state) {
      this._G_Canvas = _G_Canvas;
      this.state = state;
      this._active = true;
      this._grid_size = 16;
      this.background = null;
    }

    Controller_Draw.prototype.setActive = function(isActive) {
      return this._active = isActive;
    };

    Controller_Draw.prototype.isActive = function() {
      return this._active;
    };

    Controller_Draw.prototype.mouse_down = function(event) {};

    Controller_Draw.prototype.mouse_up = function(event) {};

    Controller_Draw.prototype.mouse_move = function(event) {};

    Controller_Draw.prototype.time = function(dt) {
      var c, color, i, r, ref, results;
      this._G_Canvas.clearScreen();
      this._G_Canvas.drawScreenBounds();
      if (this.background !== null) {
        this._G_Canvas.drawImage(this.background, 0, 0);
      }
      results = [];
      for (r = i = 0, ref = this.state.h; 0 <= ref ? i < ref : i > ref; r = 0 <= ref ? ++i : --i) {
        results.push((function() {
          var j, ref1, results1;
          results1 = [];
          for (c = j = 0, ref1 = this.state.w; 0 <= ref1 ? j < ref1 : j > ref1; c = 0 <= ref1 ? ++j : --j) {
            color = this.state.readGrid(r, c, null);
            results1.push(this.drawGridSquare(r, c, color));
          }
          return results1;
        }).call(this));
      }
      return results;
    };

    Controller_Draw.prototype.drawGridSquare = function(r, c, color) {
      var polyline, pts, x0, x1, y0, y1;
      x0 = c * 16;
      x1 = x0 + 16;
      y0 = r * 16;
      y1 = y0 + 16;
      pts = [new BDS.Point(x0, y0), new BDS.Point(x1, y0), new BDS.Point(x1, y1), new BDS.Point(x0, y1)];
      polyline = new BDS.Polyline(true, pts);
      this._G_Canvas.fillColor(color.toInt());
      this._G_Canvas.setAlpha(.5);
      this._G_Canvas.drawPolygon(polyline, false, true);
      return this._G_Canvas.setAlpha(1.0);
    };

    Controller_Draw.prototype.window_resize = function(event) {};

    Controller_Draw.prototype.setBackground = function(img) {
      return this.background = img;
    };

    return Controller_Draw;

  })();

}).call(this);
