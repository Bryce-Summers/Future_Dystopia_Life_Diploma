// Generated by CoffeeScript 1.11.1

/*
 * Drawing Controller for Future Dystopia Project.
 *
 * Adapted by Bryce Summers on 4.15.2017
 * 
 * This class renders the current state of the game as represented in the passed in state controller.
 */

(function() {
  FDP.Controller_State = (function() {
    function Controller_State() {
      var c, i, j, r, ref, ref1;
      this._active = true;
      this.grid = [];
      this.grid_temp = [];
      this.w = 75;
      this.h = 50;
      for (r = i = 0, ref = this.w; i < ref; r = i += 1) {
        for (c = j = 0, ref1 = this.h; j < ref1; c = j += 1) {
          this.grid.push(new FDP.Color(1.0, 1.0, 1.0));
          this.grid_temp.push(new FDP.Color(1.0, 0, 0));
        }
      }
      this.mouse_r = 0;
      this.mouse_c = 0;
      this._grid_size = 16;
    }

    Controller_State.prototype.readGrid = function(r, c, mode) {
      var index;
      index = this._rc_to_index(r, c);
      return this.grid[index];
    };

    Controller_State.prototype.setGrid = function(r, c, color, mode) {
      var index;
      index = this._rc_to_index(r, c);
      return this.grid[index] = color;
    };

    Controller_State.prototype.setActive = function(isActive) {
      return this._active = isActive;
    };

    Controller_State.prototype.isActive = function() {
      return this._active;
    };

    Controller_State.prototype.mouse_down = function(event) {};

    Controller_State.prototype.mouse_up = function(event) {};

    Controller_State.prototype.mouse_move = function(event) {
      this.mouse_r = (Math.floor(event.y / this._grid_size) + this.h * 10) % this.h;
      return this.mouse_c = (Math.floor(event.x / this._grid_size) + this.w * 10) % this.w;
    };

    Controller_State.prototype.time = function(dt) {
      var c, c_left, c_right, color, color_down, color_left, color_new, color_right, color_up, i, index, r, r_down, r_up, ref;
      this.setGrid(this.mouse_r, this.mouse_c, new FDP.Color(0, 0, 0), null);
      for (index = i = 0, ref = this.grid.length; 0 <= ref ? i < ref : i > ref; index = 0 <= ref ? ++i : --i) {
        r = this._index_to_row(index);
        c = this._index_to_col(index);
        r_up = (r + this.h - 1) % this.h;
        r_down = (r + 1) % this.h;
        c_left = (c + this.w - 1) % this.w;
        c_right = (c + 1) % this.w;
        color = this.readGrid(r, c);
        color_left = this.readGrid(r, c_left);
        color_right = this.readGrid(r, c_right);
        color_up = this.readGrid(r_up, c);
        color_down = this.readGrid(r_down, c);
        color_new = color_left.multScalar(.2).add(color_right.multScalar(.2)).add(color_up.multScalar(.2)).add(color_down.multScalar(.2)).add(color.multScalar(.2));
        this.grid_temp[index] = color_new;
      }
      return this._swapGrids();
    };

    Controller_State.prototype._index_to_row = function(index) {
      return Math.floor(index / this.w);
    };

    Controller_State.prototype._index_to_col = function(index) {
      return index % this.w;
    };

    Controller_State.prototype._rc_to_index = function(r, c) {
      var row_start_index;
      row_start_index = this.w * r;
      return row_start_index + c;
    };

    Controller_State.prototype._swapGrids = function() {
      var temp;
      temp = this.grid;
      this.grid = this.grid_temp;
      return this.grid_temp = temp;
    };

    Controller_State.prototype.window_resize = function(event) {};

    return Controller_State;

  })();

}).call(this);
