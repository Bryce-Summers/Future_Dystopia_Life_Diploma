/*! Scribble JS, a project by Bryce Summers.
 *  Single File concatenated by Grunt Concatenate on 24-04-2017
 */
/*
 * Defines namespaces.
 * Adapted by Bryce Summers on 12 - 30 - 2016.
 */

// future Dystopia Project.
FDP = {};
// Generated by CoffeeScript 1.11.1

/*
 * Drawing Controller for Future Dystopia Project.
 *
 * Adapted by Bryce Summers on 4.15.2017
 * 
 * This class renders the current state of the game as represented in the passed in state controller.
 */

(function() {
  FDP.Color = (function() {
    function Color(r1, g1, b1) {
      this.r = r1;
      this.g = g1;
      this.b = b1;
    }

    Color.prototype.toInt = function() {
      var blue, green, red;
      red = Math.floor(this.r * 255);
      green = Math.floor(this.g * 255);
      blue = Math.floor(this.b * 255);
      red = red << 16;
      green = green << 8;
      return red + green + blue;
    };

    Color.prototype.add = function(c) {
      var b, g, r;
      r = this.r + c.r;
      g = this.g + c.g;
      b = this.b + c.b;
      return new FDP.Color(r, g, b);
    };

    Color.prototype.mult = function(c) {
      var b, g, r;
      r = this.r * c.r;
      g = this.g * c.g;
      b = this.b * c.b;
      return new FDP.Color(r, g, b);
    };

    Color.prototype.multScalar = function(p) {
      var b, g, r;
      r = this.r * p;
      g = this.g * p;
      b = this.b * p;
      return new FDP.Color(r, g, b);
    };

    return Color;

  })();

}).call(this);

// Generated by CoffeeScript 1.11.1

/*
 * Drawing Controller for Future Dystopia Project.
 *
 * Adapted by Bryce Summers on 4.15.2017
 * 
 * This class renders the current state of the game as represented in the passed in state controller.
 */

(function() {
  FDP.Controller_Draw = (function() {
    function Controller_Draw(_G_Canvas, state) {
      this._G_Canvas = _G_Canvas;
      this.state = state;
      this._active = true;
      this._grid_size = 16;
    }

    Controller_Draw.prototype.setActive = function(isActive) {
      return this._active = isActive;
    };

    Controller_Draw.prototype.isActive = function() {
      return this._active;
    };

    Controller_Draw.prototype.mouse_down = function(event) {};

    Controller_Draw.prototype.mouse_up = function(event) {};

    Controller_Draw.prototype.mouse_move = function(event) {};

    Controller_Draw.prototype.time = function(dt) {
      var c, color, i, r, ref, results;
      this._G_Canvas.clearScreen();
      this._G_Canvas.drawScreenBounds();
      results = [];
      for (r = i = 0, ref = this.state.h; 0 <= ref ? i < ref : i > ref; r = 0 <= ref ? ++i : --i) {
        results.push((function() {
          var j, ref1, results1;
          results1 = [];
          for (c = j = 0, ref1 = this.state.w; 0 <= ref1 ? j < ref1 : j > ref1; c = 0 <= ref1 ? ++j : --j) {
            color = this.state.readGrid(r, c, null);
            results1.push(this.drawGridSquare(r, c, color));
          }
          return results1;
        }).call(this));
      }
      return results;
    };

    Controller_Draw.prototype.drawGridSquare = function(r, c, color) {
      var polyline, pts, x0, x1, y0, y1;
      x0 = c * 16;
      x1 = x0 + 16;
      y0 = r * 16;
      y1 = y0 + 16;
      pts = [new BDS.Point(x0, y0), new BDS.Point(x1, y0), new BDS.Point(x1, y1), new BDS.Point(x0, y1)];
      polyline = new BDS.Polyline(true, pts);
      this._G_Canvas.fillColor(color.toInt());
      return this._G_Canvas.drawPolygon(polyline, false, true);
    };

    Controller_Draw.prototype.window_resize = function(event) {};

    return Controller_Draw;

  })();

}).call(this);

// Generated by CoffeeScript 1.11.1

/*
 * Drawing Controller for Future Dystopia Project.
 *
 * Adapted by Bryce Summers on 4.15.2017
 * 
 * This class renders the current state of the game as represented in the passed in state controller.
 */

(function() {
  FDP.Controller_State = (function() {
    function Controller_State() {
      var c, i, j, r, ref, ref1;
      this._active = true;
      this.grid = [];
      this.grid_temp = [];
      this.w = 75;
      this.h = 50;
      for (r = i = 0, ref = this.w; i < ref; r = i += 1) {
        for (c = j = 0, ref1 = this.h; j < ref1; c = j += 1) {
          this.grid.push(new FDP.Color(1.0, 1.0, 1.0));
          this.grid_temp.push(new FDP.Color(1.0, 0, 0));
        }
      }
      this.mouse_r = 0;
      this.mouse_c = 0;
      this._grid_size = 16;
    }

    Controller_State.prototype.readGrid = function(r, c, mode) {
      var index;
      index = this._rc_to_index(r, c);
      return this.grid[index];
    };

    Controller_State.prototype.setGrid = function(r, c, color, mode) {
      var index;
      index = this._rc_to_index(r, c);
      return this.grid[index] = color;
    };

    Controller_State.prototype.setActive = function(isActive) {
      return this._active = isActive;
    };

    Controller_State.prototype.isActive = function() {
      return this._active;
    };

    Controller_State.prototype.mouse_down = function(event) {};

    Controller_State.prototype.mouse_up = function(event) {};

    Controller_State.prototype.mouse_move = function(event) {
      this.mouse_r = (Math.floor(event.y / this._grid_size) + this.h * 10) % this.h;
      return this.mouse_c = (Math.floor(event.x / this._grid_size) + this.w * 10) % this.w;
    };

    Controller_State.prototype.time = function(dt) {
      var c, c_left, c_right, color, color_down, color_left, color_new, color_right, color_up, i, index, r, r_down, r_up, ref;
      this.setGrid(this.mouse_r, this.mouse_c, new FDP.Color(0, 0, 0), null);
      for (index = i = 0, ref = this.grid.length; 0 <= ref ? i < ref : i > ref; index = 0 <= ref ? ++i : --i) {
        r = this._index_to_row(index);
        c = this._index_to_col(index);
        r_up = (r + this.h - 1) % this.h;
        r_down = (r + 1) % this.h;
        c_left = (c + this.w - 1) % this.w;
        c_right = (c + 1) % this.w;
        color = this.readGrid(r, c);
        color_left = this.readGrid(r, c_left);
        color_right = this.readGrid(r, c_right);
        color_up = this.readGrid(r_up, c);
        color_down = this.readGrid(r_down, c);
        color_new = color_left.multScalar(.2).add(color_right.multScalar(.2)).add(color_up.multScalar(.2)).add(color_down.multScalar(.2)).add(color.multScalar(.2));
        this.grid_temp[index] = color_new;
      }
      return this._swapGrids();
    };

    Controller_State.prototype._index_to_row = function(index) {
      return Math.floor(index / this.w);
    };

    Controller_State.prototype._index_to_col = function(index) {
      return index % this.w;
    };

    Controller_State.prototype._rc_to_index = function(r, c) {
      var row_start_index;
      row_start_index = this.w * r;
      return row_start_index + c;
    };

    Controller_State.prototype._swapGrids = function() {
      var temp;
      temp = this.grid;
      this.grid = this.grid_temp;
      return this.grid_temp = temp;
    };

    Controller_State.prototype.window_resize = function(event) {};

    return Controller_State;

  })();

}).call(this);
